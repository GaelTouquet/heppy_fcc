---+ Heppy : a mini framework for HEP event processing in python


%TOC{title="Contents:"}%

---++ Prerequisites

*You should be familiar with python to follow this tutorial*. 
I strongly advise to carefully follow [[http://docs.python.org/tutorial/index.html][the python tutorial]] if not yet done. It will take you a few hours now, but will gain you many days in the future. 

Why python? In short: 
   * fast learning curve: python is the most easy-to-learn language
   * high productivity: coding in python is about 10 times faster than in C++
   * high flexibility: code can be easily reused, refactored, extended. 
   * dynamic typing (similar to C++ template features, without the pain in the neck): if you do an analysis for e.g. the muon channel, it is going to work for the electron channel with only minor modifications related to lepton identification. If your analysis reads a certain kind of particle-like objects, it will probably work on other kinds of particle-like objects. 
   * very large and easy-to-use standard library

---++ A short description of the analysis system

---+++ The ntuplizer

This goal of the ntuplizer system is to produce a flat tree for each of the datasets (also called "components") used in the analysis. 
Any operation requiring a manual loop on the events can be done while producing the flat tree, so that the resulting trees can be used with simple TTree.Draw commands. 

For example, the ntuplizer allows to: 
   * read events from an albers root file produced using the FCC software framework.  
   * create python physics objects to hold the C++ objects from the albers root file. These objects have the exact same interface as the C++ objects, and can be extended with more information. For example, you could write your own muon ID function for your python Muon object, or add attributes to your python Muons along the processing flow, like the 4-momentum of the closest jet or the closest generated muon. 
   * create new python objects, e.g. a VBF object to hold VBF quantities.
   * compute event-by-event weights
   * select a trigger path, and match to the corresponding trigger objects
   * define and write simple flat trees 
It is up to you to define what you want to do, possibly re-using existing code from other analyses or writing your own. 

An analysis typically consists in several tenth of samples, or "components": data samples, standard model backgrounds, signal. The ntuplizer is built in such a way that it takes one command to either: 
   * run interactively on a single component
   * run several processes in parallel on your multiprocessor machine
   * run hundreds of processes as separate jobs on LSF, the CERN batch cluster. 

If you decide to run several processes, you can split a single component in as many chunks as input ROOT files for this component. For example, you could run in parallel:
   * 6 chunks from the DYJet component, using 6 processors of your local machine, assuming you have more than 6 input DYJet ROOT files. 
   * 200 chunks from the DYJet component, 300 from your 5 data components altogether, and 300 jobs from all the remaing components (e.g. di-boson, TTJets, ...) on LSF. 

The ntuplizer is based on python, pyroot, and the albers event data model (EDM). The analysis could be a simple python macro based on ROOT and albers.
Instead, it was decided to keep the design of typical full frameworks for high-energy physics (e.g. CMS, ATLAS, FCC), and to implement it in python. This design boils down to:
   * a python configuration system, similar to the one we use in HEP full frameworks like Gaudi. 
   * a Looper which allows to access the albers EDM events and runs a sequence of analyzers on each event. 
   * a common python event, created at the beginning of the processing of each albers EDM event, and read/modified by the analyzers.
the python event allows you to build the information you want into your event, and allows the analyzers to communicate. At the end of the processing of a given EDM event, the python event can be filled into a flat tree using a specific kind of analyzer, [[https://github.com/HEP-FCC/heppy/blob/master/analyzers/SimpleTreeProducer.py][like this one]]. 

*The code consists of two packages:*

[[https://github.com/HEP-FCC/heppy/tree/master][The core package]] contains the following packages:
   * [[https://github.com/HEP-FCC/heppy/tree/master/framework][framework]] : Core modules: python configuration system, the looper, the python event, etc.
   * [[https://github.com/HEP-FCC/heppy/tree/master/analyzers][analyzers]] : Generic analyzers
   * [[https://github.com/HEP-FCC/heppy/tree/master/statistics][statistics]] : Modules for counting and averaging, histogramming, tree production.
   * [[https://github.com/HEP-FCC/heppy/tree/master/utils][utils]] : Miscellaneous utilities, like deltaR matching tools.
It also contains a [[https://github.com/HEP-FCC/heppy/tree/master/scripts][scripts]] directory.

[[https://github.com/HEP-FCC/heppy_fcc/tree/master][The FCC-specific package]] contains the following packages:
   * [[https://github.com/HEP-FCC/heppy_fcc/tree/master/analyzers][analyzers]] : FCC-specific analyzers
   * [[https://github.com/HEP-FCC/heppy_fcc/tree/master/particles][particles]] : python physics objects for the FCC.

The code is documented. To get more information on a given class, use the python docstring functionality, for example:
<verbatim>
python
from heppy.framework.looper import Looper
help(Looper)
</verbatim>
Note: the Looper is used in [[https://github.com/HEP-FCC/heppy/blob/master/scripts/heppy_loop.py][heppy_loop.py]] (no need to understand this code :-) ).

---++ Installation

Move to a directory in your afs account:
For example: 
<pre>
mkdir HeppyTutorial 
cd HeppyTutorial
</pre>

The software packages needed for this tutorial are: 
   * albers: experimental package for the FCC event data model. 
      * will be used to create an input root file for this tutorial
      * contains a mandatory shared library describing the EDM classes
   * heppy: this python analysis framework

---+++ albers

To install albers: 
<pre>
git clone https://github.com/HEP-FCC/albers.git
cd albers 
</pre>
and follow the installation instructions in the README.md file (don't run the read and write programs, instructions to do so are in the next paragraph).

Now create the input root file:
<pre>
cd ../install/examples
./write 
ls example.root
</pre>

And try to read it using a C++ program: 
<pre>
./read
</pre>

Try to load the albers event interface module in python:
<pre>
python
import eventstore
</pre>
No message is good! You can also ignore messages of this type:
<pre>
>>> import eventstore
Error in <TGClient::TGClient>: can't open display "localhost:14.0", switching to batch mode...
 In case you run from a remote ssh session, reconnect with ssh -Y
</pre>
You might however want to reconnect with =ssh -Y= as proposed to open windows later on for plotting. 


If all the above is working, you're ready for analysis in python and can proceed to the next section. 

---+++ heppy

Go back to your tutorial directory, =HeppyTutorial=, and install the core heppy package:
<pre>
git clone https://github.com/HEP-FCC/heppy.git
cd heppy
</pre>
Follow the instructions in the README.md file.

Go back to your tutorial directory, =HeppyTutorial=, and install the specific heppy_fcc package:
<pre>
git clone https://github.com/HEP-FCC/heppy_fcc.git
cd heppy_fcc
</pre>
Follow the installation instructions in the README.md file, but do not try to run yet. 

First, prepare to read an albers file:
<pre>
cd test
ln -s $ALBERS/examples/example.root 
</pre>


---++ Exercises

---+++ 1- Understanding the configuration file

Have a detailed look at the configuration file, [[https://github.com/HEP-FCC/heppy_fcc/blob/master/test/simple_analysis_cfg.py][simple_analysis_cfg.py]]. 

Load it in python: 
<verbatim>
python -i simple_analysis_cfg.py
</verbatim>

Get info on one of the analyzers:
<pre>
print muana
</pre>

Get help on this object: 
<pre>
help(muana)
</pre>

%T% all objects created in this cfg file are just configuration objects. These configuration objects will be passed to the actual analyzers that contain your analysis code. 

%T% In the future, when you use this event processing system in your analysis, always make sure that all ingredients (components, analyzers) are defined correctly by loading your configuration in python before even trying to run.

---+++ 2- Finding existing analysis code

Open [[https://github.com/HEP-FCC/heppy_fcc/blob/master/test/simple_analysis_cfg.py][simple_analysis_cfg.py]]. 
The configuration fragments for the analyzers look like: 
<pre>
# lepton analyzer for muons (type 4)
from heppy_fcc.analyzers.FCCLeptonAnalyzer import FCCLeptonAnalyzer
muana = cfg.Analyzer(
    FCCLeptonAnalyzer,
    'muons',
    id = 4,   # selected particle id
    pt = 10., # pt cut
    eta = 3., # eta cut 
    coll_name = 'muons' # will create a list of leptons with this name in the event
    )
</pre>
The first argument is a class object coming from [[https://github.com/HEP-FCC/heppy_fcc/blob/master/analyzers/FCCLeptonAnalyzer.py][FCCLeptonAnalyzer.py]]. The framework will use this class object to create an instance of this class. 

The second argument, ='muons'=, is an instance label. This argument is optional, and is used in case several analyzers of the same class are requested. 

Have a look at the [[https://github.com/HEP-FCC/heppy_fcc/blob/master/analyzers/FCCLeptonAnalyzer.py][FCCLeptonAnalyzer.py]] module, and study the code. Then study the code of the base class in [[https://github.com/HEP-FCC/heppy/blob/master/framework/analyzer.py][analyzer.py]].


---+++ 3- Running interactively on one component

Run:  
<pre>
heppy_loop.py Out simple_analysis_cfg.py -N 1000
</pre>

You should see a healhy printout with at the end:  
<pre>
number of events processed: 1000
</pre>

In the ouput =Out= directory, you can find a component directory, =albers_example=.
Investigate the contents of this component directory, and of all directories within.
Have a look at the text files, but ignore the =.pck= files

Fire up root (here we choose to use ipython + pyroot), and check the main output tree: 

<verbatim>
ipython 
from ROOT import TFile 
f = TFile('Out/albers_example/heppy_fcc.analyzers.FCCJetTreeProducer.FCCJetTreeProducer_1/jet_tree.root')
f.ls()
t = f.Get('tree')
t.Print()
t.Draw('lep1_iso')
</verbatim>

---+++ 4- Multiprocessing on a single machine

Copy your input file: 
<pre>
cp example.root example_2.root
</pre>

Edit [[https://github.com/HEP-FCC/heppy_fcc/blob/master/test/simple_analysis_cfg.py][simple_analysis_cfg.py]]
and add the following lines, after the creation of the inputSample component object, 
and before the creation of the config object.  
<pre>
inputSample.files.append('example_2.root')
inputSample.splitFactor = 2  # splitting the component in 2 chunks
</pre>

As usual, load the configutation script in python, 
and print the =config= object.

Run again: 
<verbatim>
heppy_loop.py Multi simple_analysis_cfg.py -N 1000
</verbatim>

In the =Multi= output directory, you have chunks. 
Each of these chunks correspond to one of the threads you have run 
We're going to add everything up: 
<verbatim>
cd Multi
heppy_check.py * 
heppy_hadd.py .
</verbatim>

The first command checks that all chunks terminated correctly. 
The second command adds the root files (with hadd), the cut-flow counters, and the averages. 
For example, you can see that this cut flow counter has been added correctly:
<verbatim>
cat albers_example/mu/leptons.txt 
</verbatim>

%T% To do multiprocessing, you can also define several components corresponding to the samples you need to process. Each of these components can have its own split factor. 

%T% Check the number of processors on your machine (=cat /proc/cpuinfo=), and define the number of threads accordingly. 

%T% When debugging your code, make sure to have only one thread. 


-- Main.ColinBernet - 08 Oct 2014
